{"title":"client.c","payload":"/* client.c - code for example client program that uses TCP */\n#ifndef unix\n#define WIN32\n#include <windows.h>\n#include <winsock.h>\n#else\n#define closesocket close\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <netdb.h>\n#endif\n#include <stdio.h>\n#include <string.h>\n#define PROTOPORT 5193 /* default protocol port number */\nextern int errno;\nchar localhost[] = \"localhost\"; /* default host name */\n/*------------------------------------------------------------------------\n* Program: client\n*\n* Purpose: allocate a socket, connect to a server, and print all output\n*\n* Syntax: client [ host [port] ]\n*\n* host - name of a computer on which server is executing\n* port - protocol port number server is using\n*\n* Note: Both arguments are optional. If no host name is specified,\n* the client uses \"localhost\"; if no protocol port is\n* specified, the client uses the default given by PROTOPORT.\n*\n*------------------------------------------------------------------------\n*/\nmain(argc, argv)\nint argc;\nchar *argv[];\n{\nstruct hostent *ptrh; /* pointer to a host table entry */\nstruct protoent *ptrp; /* pointer to a protocol table entry */\nstruct sockaddr_in sad; /* structure to hold an IP address */\nint sd; /* socket descriptor */\nint port; /* protocol port number */\nchar *host; /* pointer to host name */\nint n; /* number of characters read */\nchar buf[1000]; /* buffer for data from the server */\n#ifdef WIN32\nWSADATA wsaData;\nWSAStartup(0x0101, &wsaData);\n#endif\nmemset((char *)&sad,0,sizeof(sad)); /* clear sockaddr structure */\nsad.sin_family = AF_INET; /* set family to Internet */\n/* Check command-line argument for protocol port and extract */\n/* port number if one is specified. Otherwise, use the default */\n/* port value given by constant PROTOPORT */\nif (argc > 2) { /* if protocol port specified */\nport = atoi(argv[2]); /* convert to binary */\n} else {\nport = PROTOPORT; /* use default port number */\n}\nif (port > 0) /* test for legal value */\nsad.sin_port = htons((u_short)port);\nelse { /* print error message and exit */\nfprintf(stderr,\"bad port number %s\\n\",argv[2]);\nexit(1);\n}\n/* Check host argument and assign host name. */\nif (argc > 1) {\nhost = argv[1]; /* if host argument specified */\n} else {\nhost = localhost;\n}\n/* Convert host name to equivalent IP address and copy to sad. */\nptrh = gethostbyname(host);\nif ( ((char *)ptrh) == NULL ) {\nfprintf(stderr,\"invalid host: %s\\n\", host);\nexit(1);\n}\nmemcpy(&sad.sin_addr, ptrh->h_addr, ptrh->h_length);\n/* Map TCP transport protocol name to protocol number. */\nif ( ((int)(ptrp = getprotobyname(\"tcp\"))) == 0) {\nfprintf(stderr, \"cannot map \\\"tcp\\\" to protocol number\");\nexit(1);\n}\n/* Create a socket. */\nsd = socket(PF_INET, SOCK_STREAM, ptrp->p_proto);\nif (sd < 0) {\nfprintf(stderr, \"socket creation failed\\n\");\nexit(1);\n}\n/* Connect the socket to the specified server. */\nif (connect(sd, (struct sockaddr *)&sad, sizeof(sad)) < 0) {\nfprintf(stderr,\"connect failed\\n\");\nexit(1);\n}\n/* Repeatedly read data from socket and write to user's screen. */\nn = recv(sd, buf, sizeof(buf), 0);\nwhile (n > 0) {\nwrite(1,buf,n);\nn = recv(sd, buf, sizeof(buf), 0);\n}\n/* Close the socket. */\nclosesocket(sd);\n/* Terminate the client program gracefully. */\nexit(0);\n}\n"}